#!/usr/bin/env ruby
require "logger"
require "pathname"
require "time"
require "active_support/inflector"
require "thor"

require_relative "../lib/wayfarer"

module Wayfarer
  class CLI < Thor
    class_option :log_level, type: :string, default: "info"

    option :progress, type: :boolean, default: true
    desc "exec FILE URI",
         "Run the job defined in FILE starting from URI(s)"
    def exec(file, uri)
      Wayfarer.log.level = log_level_from_string(options[:log_level])

      klass = load_class_from_file(file)

      crawler = Wayfarer::Crawler.new

      if options[:progress]
        bar = Wayfarer::Util::ProgressBar.new
        crawler.processor.add_observer(bar)
      end

      crawler.crawl(klass, uri)
    end

    option :queue_adapter, type: :string, default: "inline"
    option :wait, type: :string
    desc "enqueue FILE URI",
         "Run the job defined in FILE starting from URI(s)"
    def enqueue(file, uri)
      Wayfarer.log.level = log_level_from_string(options[:log_level])

      ActiveJob::Base.queue_adapter = options[:queue_adapter].to_sym

      if wait = options[:wait]
        delayed_seconds = differing_seconds_from_string(wait)
        load_class_from_file(file)
          .set(wait: delayed_seconds)
          .perform_later(uri)
      else
        load_class_from_file(file).perform_later(uri)
      end
    end

    desc "route FILE URI",
         "Output the first matching route from FILE for URI"
    def route(file, uri)
      Wayfarer.log.level = log_level_from_string(options[:log_level])

      klass = load_class_from_file(file)

      method, params = klass.router.route(URI(uri))

      if method
        puts "Dispatching to :#{method} with parameters: #{params}"
      else
        puts "No matching route."
      end
    end

    desc "version", "Print the version"
    def version
      puts Wayfarer::VERSION
    end

    private

    def log_level_from_string(str)
      case str.downcase
      when "unknown" then Logger::UNKNOWN
      when "debug"   then Logger::DEBUG
      when "error"   then Logger::ERROR
      when "fatal"   then Logger::FATAL
      when "info"    then Logger::INFO
      when "warn"    then Logger::WARN
      end
    end

    def differing_seconds_from_string(str)
      if secs = Integer(secs) rescue nil
        secs
      elsif time = Time.parse(str) rescue nil
        time - Time.now
      else
        require "chronic"
        Chronic.parse(str) - Time.now
      end
    end

    def load_class_from_file(file)
      path = File.join(Dir.pwd, file.chomp(".rb"))
      base_name = Pathname.new(path).basename.to_s

      require path
      base_name.camelize.constantize
    end
  end
end

Wayfarer::CLI.start(ARGV)
